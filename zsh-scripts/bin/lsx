#!/usr/bin/python
import os
import sys
import os.path
import pwd, grp
import subprocess
import re

ls_commands = '''
    /usr/local/bin/gls
    /opt/local/libexec/gnubin/ls
    /usr/bin/ls
'''.split()

dont_process_args = '''
    -1
    -nc
    -none
'''.split()

LINE_REGEX = re.compile('''
       ^(.{10}\+?                   # drwxrwxrwx + optional +

       \s+\d+\s+)                   # links

       (\S+)                        # user
       (\s+)
       (\S+)                        # group

       (?:(\s+)(\d+)(\s+))?
''', re.X)

class Runner(object):
    def read_color_config(self, filename, self_name):
        colors = { }
    
        with open(filename) as config:
            for i in config:
                contents = i.split('=', 1)
    
                if len(contents) != 2:
                    continue
    
                unames, color = contents
                color = color.strip()
                unames = unames.split(';')
    
                for u in unames:
                    u = u.strip()
                    if u == '%self':
                        u = self_name
    
                    colors[u] = '\033[%s' % color
    
        return colors
    
    
    def do_simple_ls(self, ls_command, arguments):
        rc = subprocess.call([ls_command] + arguments)
        sys.exit(rc)
    

    def colorize(self, dictionary, value):
        if value not in dictionary:
            return value

        return dictionary[value] + value + '\033[0m'


    def stripe(self, value):
        parts = []
        color = 0
        colorstrings = [ '\033[38;5;227m', '\033[38;5;249m' ]

        while value:
            parts.insert(0, colorstrings[color] + value[-3:])
            color = not color
            value = value[:-3]

        return ''.join(['\033[0m'] + parts + ['\033[0m'])


    def do_line_subst(self, match):
        m = list(i or '' for i in match.groups())

        username = m[1]
        m[1] = self.colorize(self.user_colors, m[1])

        groupname = m[3]
        m[3] = self.colorize(self.group_colors, m[3])

        if len(m) > 5:
            m[5] = self.stripe(m[5])

        return ''.join(m)

    
    def main(self):
        ls_command = '/bin/ls'
    
        for i in ls_commands:
            if os.access(i, os.X_OK):
                ls_command = i
                break
    
        arguments = sys.argv[1:]
        argset = set(sys.argv)
    
        # if we are doing a simple ls here ... without anything to color
        for i in dont_process_args:
            if i in argset:
                self.do_simple_ls(ls_command, arguments)
                sys.exit(1)
    
        config_path = os.path.expanduser('~/.zsh/etc')
    
        try:
            user = os.getlogin()
            self.user_colors = self.read_color_config(
                os.path.join(config_path, 'ls_u_colors'),
                user)
    
        except Exception as e:
            self.user_colors = {}

    
        try:
            group = grp.getgrgid(os.getgid()).gr_name
            self.group_colors = self.read_color_config(
                os.path.join(config_path, 'ls_g_colors'),
                group)
    
        except Exception as e:
            self.group_colors = {}
    
        ls_pipe = subprocess.Popen(
            [ ls_command, '--color', '-lF' ] + arguments,
            stdout=subprocess.PIPE
        )
        
        try:
            for i in ls_pipe.stdout:
                i = LINE_REGEX.sub(self.do_line_subst, i)
                sys.stdout.write(i)
        # In case python points to python3, use python2 instead
        except TypeError:
            subprocess.call(['/usr/bin/env', 'python2', '%s' % sys.argv[0]])
        sys.exit(ls_pipe.returncode)

if __name__ == '__main__':
    Runner().main()
